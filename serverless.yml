service: mac-serverless-helloearth

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-southeast-1

functions:
  hello:
    handler: handler.helloEarth
    events:
      - alb:
          listenerArn: !Ref HelloEarthALBListener
          priority: 1
          conditions:
            path: /helloearth

resources:
  Resources:

    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: 'true'
        EnableDnsHostnames: 'true'

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ${self:service}-ig

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC

    Subnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        CidrBlock: 10.0.0.0/24
        AvailabilityZone: "ap-southeast-1a"

    Subnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: "ap-southeast-1b"

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: ${self:service}-rt

    DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref Subnet1

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref Subnet2

    HelloEarthALB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: ${self:service}-alb
        Scheme: internet-facing
        Subnets:
          - Ref: Subnet1
          - Ref: Subnet2
        SecurityGroups:
          - Ref: HelloEarthSG
        LoadBalancerAttributes:
          - Key: idle_timeout.timeout_seconds
            Value: '30'

    HelloEarthSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: ${self:service}-sg
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: 0.0.0.0/0

    HelloEarthALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - TargetGroupArn: !Ref HelloEarthTG
            Type: forward
        LoadBalancerArn: !Ref HelloEarthALB
        Port: 80
        Protocol: "HTTP"

    HelloEarthTG:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckEnabled: false
        Name: ${self:service}-tg
        TargetType: lambda
        Targets:
          - Id: !GetAtt HelloLambdaFunction.Arn

    LambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt HelloLambdaFunction.Arn
        Action: 'lambda:InvokeFunction'
        Principal: elasticloadbalancing.amazonaws.com

  Outputs:
    awsAccountId:
      Value: !Ref AWS::AccountId
    awsRegion:
      Value: !Ref AWS::Region
    HelloEarthLambdaArn:
      Value: !GetAtt HelloLambdaFunction.Arn
    VPCId:
      Value: !Ref VPC
    Subnet1Id:
      Value: !Ref Subnet1
    Subnet2Id:
      Value: !Ref Subnet2
